{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes'; //api.fetchPosts\n//Action Creators (他们是返回action的函数)\n//use redux-thunk here: async(dispatch)=> 使用异步等待功能\n\nexport const getPosts = () => async dispatch => {\n  //一个简单的action ，payload存储帖子的数据\n  // const action={type:'FETCH_ALL',payload:[]}\n  // return action;\n  try {\n    //in try , fetch all data from api\n    //一般来说 Data 代表的是帖子\n    //此处fetch出来的数据是后台的数据！\n    const {\n      data\n    } = await api.fetchPosts(); //把后台fetch出来的data(数据库里的内容)通过payload:data发送数据\n    //次数使用dispatch(action对象)是因为redux thunk\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  } //const action ={type:'FETCH_ALL',payload:[] }\n  //dispatch(action) ;\n\n};\nexport const createPost = post => async dispatch => {\n  console.log(\"测试策划\");\n  console.log(post);\n\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    //await api.delelte(id)\n    //console.log(\"degeltepost\");\n    //dispatch({type:'TEST2',payload:id})\n    //await api.delelte(id)\n    await api.delelte(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"names":["api","FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","createPost","post","updatePost","id","deletePost","delelte","likePost"],"sources":["E:/Learn/FullStack/client/src/actions/posts.js"],"sourcesContent":["import * as api from '../api';\r\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\n//api.fetchPosts\r\n\r\n//Action Creators (他们是返回action的函数)\r\n//use redux-thunk here: async(dispatch)=> 使用异步等待功能\r\nexport const getPosts=()=>async(dispatch)=>{\r\n\r\n    //一个简单的action ，payload存储帖子的数据\r\n    // const action={type:'FETCH_ALL',payload:[]}\r\n    // return action;\r\n\r\n    try {\r\n        //in try , fetch all data from api\r\n        //一般来说 Data 代表的是帖子\r\n        //此处fetch出来的数据是后台的数据！\r\n        const {data}= await api.fetchPosts();\r\n\r\n        //把后台fetch出来的data(数据库里的内容)通过payload:data发送数据\r\n        //次数使用dispatch(action对象)是因为redux thunk\r\n        dispatch({type:FETCH_ALL,payload:data})\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n\r\n    //const action ={type:'FETCH_ALL',payload:[] }\r\n\r\n    //dispatch(action) ;\r\n\r\n}\r\n\r\nexport const createPost=(post)=>async(dispatch)=>{\r\n    console.log(\"测试策划\")\r\n    console.log(post)\r\n    try {\r\n        const {data}= await api.createPost(post);\r\n        dispatch({type:CREATE,payload:data});\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n\r\n\r\n}\r\n\r\n export const updatePost = (id, post) => async (dispatch) => {\r\n   try {\r\n    const { data } = await api.updatePost(id, post);\r\n\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nexport const deletePost =(id) =>async(dispatch)=>{\r\n    try {\r\n         //await api.delelte(id)\r\n         //console.log(\"degeltepost\");\r\n        //dispatch({type:'TEST2',payload:id})\r\n        //await api.delelte(id)\r\n        await api.delelte(id)\r\n        dispatch({type:DELETE,payload:id})\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n\r\n\r\n};\r\n\r\nexport const likePost=(id)=>async(dispatch)=>{\r\n    try {\r\n        const {data}=await api.likePost(id)\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n    }\r\n\r\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,0BAAxD,C,CACA;AAEA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAC,MAAI,MAAMC,QAAN,IAAiB;EAEvC;EACA;EACA;EAEA,IAAI;IACA;IACA;IACA;IACA,MAAM;MAACC;IAAD,IAAQ,MAAMR,GAAG,CAACS,UAAJ,EAApB,CAJA,CAMA;IACA;;IACAF,QAAQ,CAAC;MAACG,IAAI,EAACT,SAAN;MAAgBU,OAAO,EAACH;IAAxB,CAAD,CAAR;EACH,CATD,CASE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH,CAjBsC,CAmBvC;EAEA;;AAEH,CAvBM;AAyBP,OAAO,MAAMC,UAAU,GAAEC,IAAD,IAAQ,MAAMV,QAAN,IAAiB;EAC7CM,OAAO,CAACC,GAAR,CAAY,MAAZ;EACAD,OAAO,CAACC,GAAR,CAAYG,IAAZ;;EACA,IAAI;IACA,MAAM;MAACT;IAAD,IAAQ,MAAMR,GAAG,CAACgB,UAAJ,CAAeC,IAAf,CAApB;IACAV,QAAQ,CAAC;MAACG,IAAI,EAACR,MAAN;MAAaS,OAAO,EAACH;IAArB,CAAD,CAAR;EACH,CAHD,CAGE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AAGJ,CAXM;AAaN,OAAO,MAAMG,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOV,QAAP,IAAoB;EAC1D,IAAI;IACH,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACkB,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;IAEAV,QAAQ,CAAC;MAAEG,IAAI,EAAEP,MAAR;MAAgBQ,OAAO,EAAEH;IAAzB,CAAD,CAAR;EACD,CAJA,CAIC,OAAOI,KAAP,EAAc;IACdC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACD;AACF,CARO;AAUR,OAAO,MAAMK,UAAU,GAAGD,EAAD,IAAO,MAAMZ,QAAN,IAAiB;EAC7C,IAAI;IACC;IACA;IACD;IACA;IACA,MAAMP,GAAG,CAACqB,OAAJ,CAAYF,EAAZ,CAAN;IACAZ,QAAQ,CAAC;MAACG,IAAI,EAACN,MAAN;MAAaO,OAAO,EAACQ;IAArB,CAAD,CAAR;EACH,CAPD,CAOE,OAAOP,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AAGJ,CAbM;AAeP,OAAO,MAAMO,QAAQ,GAAEH,EAAD,IAAM,MAAMZ,QAAN,IAAiB;EACzC,IAAI;IACA,MAAM;MAACC;IAAD,IAAO,MAAMR,GAAG,CAACsB,QAAJ,CAAaH,EAAb,CAAnB;IACAZ,QAAQ,CAAC;MAAEG,IAAI,EAAEL,IAAR;MAAcM,OAAO,EAAEH;IAAvB,CAAD,CAAR;EACH,CAHD,CAGE,OAAOI,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;EACH;AAEJ,CARM"},"metadata":{},"sourceType":"module"}